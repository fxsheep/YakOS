#ifndef __CHIP_REGS_H__
#define __CHIP_REGS_H__

#define REG_BASE_INTC   0x10190000
#define REG_BASE_SC 	0x101E0000
#define REG_BASE_TIMER_01   0x101E2000
#define REG_BASE_UART0  0x101EA000

#define REG_SIZE_INTC   0x1000
#define REG_SIZE_TIMER_01   0x1000
#define REG_SIZE_UART0  0x1000

#define REG_SC_APLLCFGSTAT1	0x018

#define REG_INTC_IRQSTATUS	0x000
#define REG_INTC_FIQSTATUS	0x004
#define REG_INTC_RAWSTATUS	0x008
#define REG_INTC_INTSELECT	0x00C
#define REG_INTC_INTENABLE	0x010
#define REG_INTC_INTENCLEAR	0x014
#define REG_INTC_SOFTINT	0x018
#define REG_INTC_SOFTINTCLEAR	0x01C
#define REG_INTC_SUPERPRIV_PROT	0x020

#define INTNR_IRQ_START 0
#define INTNR_IRQ_END   31

#define INTNR_TIMER_0	2
#define INTNR_UART0	10

//the offset for timer(0/2/4)
#define REG_TIMER_RELOAD	0x000
#define REG_TIMER_VALUE		0x004
#define REG_TIMER_CONTROL	0x008
#define REG_TIMER_INTCLR	0x00C
#define REG_TIMER_RIS		0x000
#define REG_TIMER_MIS		0x004
#define REG_TIMER_BGLOAD	0x008
//the offset address of  timer(1/3/5) is upper add to REG_TIMER_135_OFFSET
#define REG_TIMER_135_OFFSET	0x020

#define MEM_BASE_DDR	0xC0000000
#define MEM_BASE_FLASH	0x34000000
#define DEFAULT_UART_CLK 54000000

#define BOOT_FROM_FLASH1 0
#define BOOT_FROM_FLASH2 3
#define BOOT_FROM_NAND  1
#define BOOT_FROM_SPI   2

#define PLLC_TO_REFDIV_FBDIV(REFDIV,FBDIV,pllc)  do{ \
REFDIV= (pllc>>12)&0x3F; \
FBDIV = (pllc)&0xFFF;}while(0)
#define REFDIV_FBDIV_TO_BUSCLK(REFDIV,FBDIV,fxin)  (fxin/REFDIV*FBDIV/12)

#endif /*End of __CHIP_REGS_H__ */
